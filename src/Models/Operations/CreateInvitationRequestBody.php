<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Clerk\Backend\Models\Operations;


/** CreateInvitationRequestBody - Required parameters */
class CreateInvitationRequestBody
{
    /**
     * The email address the invitation will be sent to
     *
     * @var string $emailAddress
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('email_address')]
    public string $emailAddress;

    /**
     * Metadata that will be attached to the newly created invitation.
     *
     * The value of this property should be a well-formed JSON object.
     * Once the user accepts the invitation and signs up, these metadata will end up in the user's public metadata.
     *
     * @var ?CreateInvitationPublicMetadata $publicMetadata
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('public_metadata')]
    #[\Speakeasy\Serializer\Annotation\Type('\Clerk\Backend\Models\Operations\CreateInvitationPublicMetadata|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?CreateInvitationPublicMetadata $publicMetadata = null;

    /**
     * Optional URL which specifies where to redirect the user once they click the invitation link.
     *
     * This is only required if you have implemented a [custom flow](https://clerk.com/docs/authentication/invitations#custom-flow) and you're not using Clerk Hosted Pages or Clerk Components.
     *
     * @var ?string $redirectUrl
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('redirect_url')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $redirectUrl = null;

    /**
     * Optional flag which denotes whether an email invitation should be sent to the given email address.
     *
     * Defaults to true.
     *
     * @var ?bool $notify
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('notify')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $notify = null;

    /**
     * Whether an invitation should be created if there is already an existing invitation for this email address, or it's claimed by another user.
     *
     * @var ?bool $ignoreExisting
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('ignore_existing')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $ignoreExisting = null;

    /**
     * @param  string  $emailAddress
     * @param  ?CreateInvitationPublicMetadata  $publicMetadata
     * @param  ?string  $redirectUrl
     * @param  ?bool  $notify
     * @param  ?bool  $ignoreExisting
     */
    public function __construct(string $emailAddress, ?CreateInvitationPublicMetadata $publicMetadata = null, ?string $redirectUrl = null, ?bool $notify = true, ?bool $ignoreExisting = false)
    {
        $this->emailAddress = $emailAddress;
        $this->publicMetadata = $publicMetadata;
        $this->redirectUrl = $redirectUrl;
        $this->notify = $notify;
        $this->ignoreExisting = $ignoreExisting;
    }
}