<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Clerk\Backend\Models\Operations;


class UpdateJWTTemplateRequestBody
{
    /**
     * JWT template name
     *
     * @var ?string $name
     */
    #[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;

    /**
     * JWT template claims in JSON format
     *
     * @var ?\Clerk\Backend\Models\Operations\UpdateJWTTemplateClaims $claims
     */
    #[\JMS\Serializer\Annotation\SerializedName('claims')]
    #[\JMS\Serializer\Annotation\Type('Clerk\Backend\Models\Operations\UpdateJWTTemplateClaims')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UpdateJWTTemplateClaims $claims = null;

    /**
     * JWT token lifetime
     *
     * @var ?float $lifetime
     */
    #[\JMS\Serializer\Annotation\SerializedName('lifetime')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $lifetime = null;

    /**
     * JWT token allowed clock skew
     *
     * @var ?float $allowedClockSkew
     */
    #[\JMS\Serializer\Annotation\SerializedName('allowed_clock_skew')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $allowedClockSkew = null;

    /**
     * Whether a custom signing key/algorithm is also provided for this template
     *
     * @var ?bool $customSigningKey
     */
    #[\JMS\Serializer\Annotation\SerializedName('custom_signing_key')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $customSigningKey = null;

    /**
     * The custom signing algorithm to use when minting JWTs
     *
     * @var ?string $signingAlgorithm
     */
    #[\JMS\Serializer\Annotation\SerializedName('signing_algorithm')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $signingAlgorithm = null;

    /**
     * The custom signing private key to use when minting JWTs
     *
     * @var ?string $signingKey
     */
    #[\JMS\Serializer\Annotation\SerializedName('signing_key')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $signingKey = null;

    public function __construct()
    {
        $this->name = null;
        $this->claims = null;
        $this->lifetime = null;
        $this->allowedClockSkew = null;
        $this->customSigningKey = null;
        $this->signingAlgorithm = null;
        $this->signingKey = null;
    }
}