<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Clerk\Backend\Models\Operations;


class CreateSAMLConnectionRequestBody
{
    /**
     * The name to use as a label for this SAML Connection
     *
     * @var string $name
     */
    #[\JMS\Serializer\Annotation\SerializedName('name')]
    public string $name;

    /**
     * The domain of your organization. Sign in flows using an email with this domain, will use this SAML Connection.
     *
     * @var string $domain
     */
    #[\JMS\Serializer\Annotation\SerializedName('domain')]
    public string $domain;

    /**
     * The IdP provider of the connection.
     *
     * @var Provider $provider
     */
    #[\JMS\Serializer\Annotation\SerializedName('provider')]
    #[\JMS\Serializer\Annotation\Type('\Clerk\Backend\Models\Operations\Provider')]
    public Provider $provider;

    /**
     * The Entity ID as provided by the IdP
     *
     * @var ?string $idpEntityId
     */
    #[\JMS\Serializer\Annotation\SerializedName('idp_entity_id')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $idpEntityId = null;

    /**
     * The Single-Sign On URL as provided by the IdP
     *
     * @var ?string $idpSsoUrl
     */
    #[\JMS\Serializer\Annotation\SerializedName('idp_sso_url')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $idpSsoUrl = null;

    /**
     * The X.509 certificate as provided by the IdP
     *
     * @var ?string $idpCertificate
     */
    #[\JMS\Serializer\Annotation\SerializedName('idp_certificate')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $idpCertificate = null;

    /**
     * The URL which serves the IdP metadata. If present, it takes priority over the corresponding individual properties
     *
     * @var ?string $idpMetadataUrl
     */
    #[\JMS\Serializer\Annotation\SerializedName('idp_metadata_url')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $idpMetadataUrl = null;

    /**
     * The XML content of the IdP metadata file. If present, it takes priority over the corresponding individual properties
     *
     * @var ?string $idpMetadata
     */
    #[\JMS\Serializer\Annotation\SerializedName('idp_metadata')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $idpMetadata = null;

    /**
     * Define the attribute name mapping between Identity Provider and Clerk's user properties
     *
     * @var ?AttributeMapping $attributeMapping
     */
    #[\JMS\Serializer\Annotation\SerializedName('attribute_mapping')]
    #[\JMS\Serializer\Annotation\Type('\Clerk\Backend\Models\Operations\AttributeMapping|null')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AttributeMapping $attributeMapping = null;

    /**
     * @param  ?string  $name
     * @param  ?string  $domain
     * @param  ?Provider  $provider
     * @param  ?string  $idpEntityId
     * @param  ?string  $idpSsoUrl
     * @param  ?string  $idpCertificate
     * @param  ?string  $idpMetadataUrl
     * @param  ?string  $idpMetadata
     * @param  ?AttributeMapping  $attributeMapping
     */
    public function __construct(?string $name = null, ?string $domain = null, ?Provider $provider = null, ?string $idpEntityId = null, ?string $idpSsoUrl = null, ?string $idpCertificate = null, ?string $idpMetadataUrl = null, ?string $idpMetadata = null, ?AttributeMapping $attributeMapping = null)
    {
        $this->name = $name;
        $this->domain = $domain;
        $this->provider = $provider;
        $this->idpEntityId = $idpEntityId;
        $this->idpSsoUrl = $idpSsoUrl;
        $this->idpCertificate = $idpCertificate;
        $this->idpMetadataUrl = $idpMetadataUrl;
        $this->idpMetadata = $idpMetadata;
        $this->attributeMapping = $attributeMapping;
    }
}