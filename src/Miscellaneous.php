<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Clerk\Backend;

use Clerk\Backend\Models\Operations;

class Miscellaneous
{
    private SDKConfiguration $sdkConfiguration;
    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(public SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * Returns the markup for the interstitial page
     *
     * The Clerk interstitial endpoint serves an html page that loads clerk.js in order to check the user's authentication state.
     * It is used by Clerk SDKs when the user's authentication state cannot be immediately determined.
     *
     * @param  ?string  $frontendApi
     * @param  ?string  $publishableKey
     * @return Operations\GetPublicInterstitialResponse
     * @throws \Clerk\Backend\Models\Errors\SDKException
     */
    public function getInterstitial(?string $frontendApi = null, ?string $publishableKey = null): Operations\GetPublicInterstitialResponse
    {
        $request = new Operations\GetPublicInterstitialRequest(
            frontendApi: $frontendApi,
            publishableKey: $publishableKey,
        );
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/public/interstitial');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\GetPublicInterstitialRequest::class, $request));
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);
        $httpResponse = $this->sdkConfiguration->defaultClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            return new Operations\GetPublicInterstitialResponse(
                statusCode: $statusCode,
                contentType: $contentType,
                rawResponse: $httpResponse
            );
        } elseif ($statusCode == 400 || $statusCode >= 400 && $statusCode < 500 || $statusCode == 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \Clerk\Backend\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Clerk\Backend\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

}