<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Clerk\Backend;

class Miscellaneous
{
    private SDKConfiguration $sdkConfiguration;

    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * Returns the markup for the interstitial page
     *
     * The Clerk interstitial endpoint serves an html page that loads clerk.js in order to check the user's authentication state.
     * It is used by Clerk SDKs when the user's authentication state cannot be immediately determined.
     *
     * @param  ?string  $frontendApi
     * @param  ?string  $publishableKey
     * @return \Clerk\Backend\Models\Operations\GetPublicInterstitialResponse
     */
    public function getPublicInterstitial(
        ?string $frontendApi = null,
        ?string $publishableKey = null,
    ): \Clerk\Backend\Models\Operations\GetPublicInterstitialResponse {
        $request = new \Clerk\Backend\Models\Operations\GetPublicInterstitialRequest();
        $request->frontendApi = $frontendApi;
        $request->publishableKey = $publishableKey;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/public/interstitial');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Clerk\Backend\Models\Operations\GetPublicInterstitialRequest::class, $request, null));
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpResponse = $this->sdkConfiguration->defaultClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\GetPublicInterstitialResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}