<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Clerk\Backend;

class SAMLConnections
{
    private SDKConfiguration $sdkConfiguration;

    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * Get a list of SAML Connections for an instance
     *
     * Returns the list of SAML Connections for an instance.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The SAML Connections are ordered by descending creation date and the most recent will be returned first.
     *
     * @param  ?float  $limit
     * @param  ?float  $offset
     * @return \Clerk\Backend\Models\Operations\ListSAMLConnectionsResponse
     */
    public function listSAMLConnections(
        ?float $limit = null,
        ?float $offset = null,
    ): \Clerk\Backend\Models\Operations\ListSAMLConnectionsResponse {
        $request = new \Clerk\Backend\Models\Operations\ListSAMLConnectionsRequest();
        $request->limit = $limit;
        $request->offset = $offset;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/saml_connections');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Clerk\Backend\Models\Operations\ListSAMLConnectionsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\ListSAMLConnectionsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->samlConnections = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\SAMLConnections', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 402 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Create a SAML Connection
     *
     * Create a new SAML Connection.
     *
     * @param  \Clerk\Backend\Models\Operations\CreateSAMLConnectionRequestBody  $request
     * @return \Clerk\Backend\Models\Operations\CreateSAMLConnectionResponse
     */
    public function createSAMLConnection(
        ?\Clerk\Backend\Models\Operations\CreateSAMLConnectionRequestBody $request,
    ): \Clerk\Backend\Models\Operations\CreateSAMLConnectionResponse {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/saml_connections');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\CreateSAMLConnectionResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->samlConnection = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\SAMLConnection', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 402 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Retrieve a SAML Connection by ID
     *
     * Fetches the SAML Connection whose ID matches the provided `saml_connection_id` in the path.
     *
     * @param  string  $samlConnectionId
     * @return \Clerk\Backend\Models\Operations\GetSAMLConnectionResponse
     */
    public function getSAMLConnection(
        string $samlConnectionId,
    ): \Clerk\Backend\Models\Operations\GetSAMLConnectionResponse {
        $request = new \Clerk\Backend\Models\Operations\GetSAMLConnectionRequest();
        $request->samlConnectionId = $samlConnectionId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/saml_connections/{saml_connection_id}', \Clerk\Backend\Models\Operations\GetSAMLConnectionRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\GetSAMLConnectionResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->samlConnection = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\SAMLConnection', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 402 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Update a SAML Connection
     *
     * Updates the SAML Connection whose ID matches the provided `id` in the path.
     *
     * @param  string  $samlConnectionId
     * @param  \Clerk\Backend\Models\Operations\UpdateSAMLConnectionRequestBody  $requestBody
     * @return \Clerk\Backend\Models\Operations\UpdateSAMLConnectionResponse
     */
    public function updateSAMLConnection(
        string $samlConnectionId,
        \Clerk\Backend\Models\Operations\UpdateSAMLConnectionRequestBody $requestBody,
    ): \Clerk\Backend\Models\Operations\UpdateSAMLConnectionResponse {
        $request = new \Clerk\Backend\Models\Operations\UpdateSAMLConnectionRequest();
        $request->samlConnectionId = $samlConnectionId;
        $request->requestBody = $requestBody;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/saml_connections/{saml_connection_id}', \Clerk\Backend\Models\Operations\UpdateSAMLConnectionRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PATCH', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\UpdateSAMLConnectionResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->samlConnection = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\SAMLConnection', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 402 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Delete a SAML Connection
     *
     * Deletes the SAML Connection whose ID matches the provided `id` in the path.
     *
     * @param  string  $samlConnectionId
     * @return \Clerk\Backend\Models\Operations\DeleteSAMLConnectionResponse
     */
    public function deleteSAMLConnection(
        string $samlConnectionId,
    ): \Clerk\Backend\Models\Operations\DeleteSAMLConnectionResponse {
        $request = new \Clerk\Backend\Models\Operations\DeleteSAMLConnectionRequest();
        $request->samlConnectionId = $samlConnectionId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/saml_connections/{saml_connection_id}', \Clerk\Backend\Models\Operations\DeleteSAMLConnectionRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\DeleteSAMLConnectionResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deletedObject = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\DeletedObject', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 402 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }
}