<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Clerk\Backend;

class Users
{
    private SDKConfiguration $sdkConfiguration;

    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * List all users
     *
     * Returns a list of all users.
     * The users are returned sorted by creation date, with the newest users appearing first.
     *
     * @param  \Clerk\Backend\Models\Operations\GetUserListRequest  $request
     * @return \Clerk\Backend\Models\Operations\GetUserListResponse
     */
    public function getUserList(
        ?\Clerk\Backend\Models\Operations\GetUserListRequest $request,
    ): \Clerk\Backend\Models\Operations\GetUserListResponse {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/users');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Clerk\Backend\Models\Operations\GetUserListRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\GetUserListResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userList = $serializer->deserialize((string) $httpResponse->getBody(), 'array<Clerk\Backend\Models\Components\User>', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Create a new user
     *
     * Creates a new user. Your user management settings determine how you should setup your user model.
     *
     * Any email address and phone number created using this method will be marked as verified.
     *
     * Note: If you are performing a migration, check out our guide on [zero downtime migrations](https://clerk.com/docs/deployments/migrate-overview).
     *
     * A rate limit rule of 20 requests per 10 seconds is applied to this endpoint.
     *
     * @param  \Clerk\Backend\Models\Operations\CreateUserRequestBody  $request
     * @return \Clerk\Backend\Models\Operations\CreateUserResponse
     */
    public function createUser(
        \Clerk\Backend\Models\Operations\CreateUserRequestBody $request,
    ): \Clerk\Backend\Models\Operations\CreateUserResponse {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/users');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\CreateUserResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\User', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Count users
     *
     * Returns a total count of all users that match the given filtering criteria.
     *
     * @param  \Clerk\Backend\Models\Operations\GetUsersCountRequest  $request
     * @return \Clerk\Backend\Models\Operations\GetUsersCountResponse
     */
    public function getUsersCount(
        ?\Clerk\Backend\Models\Operations\GetUsersCountRequest $request,
    ): \Clerk\Backend\Models\Operations\GetUsersCountResponse {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/users/count');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Clerk\Backend\Models\Operations\GetUsersCountRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\GetUsersCountResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->totalCount = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\TotalCount', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Retrieve a user
     *
     * Retrieve the details of a user
     *
     * @param  string  $userId
     * @return \Clerk\Backend\Models\Operations\GetUserResponse
     */
    public function getUser(
        string $userId,
    ): \Clerk\Backend\Models\Operations\GetUserResponse {
        $request = new \Clerk\Backend\Models\Operations\GetUserRequest();
        $request->userId = $userId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}', \Clerk\Backend\Models\Operations\GetUserRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\GetUserResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\User', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Update a user
     *
     * Update a user's attributes.
     *
     * You can set the user's primary contact identifiers (email address and phone numbers) by updating the `primary_email_address_id` and `primary_phone_number_id` attributes respectively.
     * Both IDs should correspond to verified identifications that belong to the user.
     *
     * You can remove a user's username by setting the username attribute to null or the blank string "".
     * This is a destructive action; the identification will be deleted forever.
     * Usernames can be removed only if they are optional in your instance settings and there's at least one other identifier which can be used for authentication.
     *
     * This endpoint allows changing a user's password. When passing the `password` parameter directly you have two further options.
     * You can ignore the password policy checks for your instance by setting the `skip_password_checks` parameter to `true`.
     * You can also choose to sign the user out of all their active sessions on any device once the password is updated. Just set `sign_out_of_other_sessions` to `true`.
     *
     * @param  string  $userId
     * @param  \Clerk\Backend\Models\Operations\UpdateUserRequestBody  $requestBody
     * @return \Clerk\Backend\Models\Operations\UpdateUserResponse
     */
    public function updateUser(
        string $userId,
        \Clerk\Backend\Models\Operations\UpdateUserRequestBody $requestBody,
    ): \Clerk\Backend\Models\Operations\UpdateUserResponse {
        $request = new \Clerk\Backend\Models\Operations\UpdateUserRequest();
        $request->userId = $userId;
        $request->requestBody = $requestBody;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}', \Clerk\Backend\Models\Operations\UpdateUserRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PATCH', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\UpdateUserResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\User', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Delete a user
     *
     * Delete the specified user
     *
     * @param  string  $userId
     * @return \Clerk\Backend\Models\Operations\DeleteUserResponse
     */
    public function deleteUser(
        string $userId,
    ): \Clerk\Backend\Models\Operations\DeleteUserResponse {
        $request = new \Clerk\Backend\Models\Operations\DeleteUserRequest();
        $request->userId = $userId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}', \Clerk\Backend\Models\Operations\DeleteUserRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\DeleteUserResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deletedObject = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\DeletedObject', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Ban a user
     *
     * Marks the given user as banned, which means that all their sessions are revoked and they are not allowed to sign in again.
     *
     * @param  string  $userId
     * @return \Clerk\Backend\Models\Operations\BanUserResponse
     */
    public function banUser(
        string $userId,
    ): \Clerk\Backend\Models\Operations\BanUserResponse {
        $request = new \Clerk\Backend\Models\Operations\BanUserRequest();
        $request->userId = $userId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/ban', \Clerk\Backend\Models\Operations\BanUserRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\BanUserResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\User', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 402) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Unban a user
     *
     * Removes the ban mark from the given user.
     *
     * @param  string  $userId
     * @return \Clerk\Backend\Models\Operations\UnbanUserResponse
     */
    public function unbanUser(
        string $userId,
    ): \Clerk\Backend\Models\Operations\UnbanUserResponse {
        $request = new \Clerk\Backend\Models\Operations\UnbanUserRequest();
        $request->userId = $userId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/unban', \Clerk\Backend\Models\Operations\UnbanUserRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\UnbanUserResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\User', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 402) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Lock a user
     *
     * Marks the given user as locked, which means they are not allowed to sign in again until the lock expires.
     * Lock duration can be configured in the instance's restrictions settings.
     *
     * @param  string  $userId
     * @return \Clerk\Backend\Models\Operations\LockUserResponse
     */
    public function lockUser(
        string $userId,
    ): \Clerk\Backend\Models\Operations\LockUserResponse {
        $request = new \Clerk\Backend\Models\Operations\LockUserRequest();
        $request->userId = $userId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/lock', \Clerk\Backend\Models\Operations\LockUserRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\LockUserResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\User', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Unlock a user
     *
     * Removes the lock from the given user.
     *
     * @param  string  $userId
     * @return \Clerk\Backend\Models\Operations\UnlockUserResponse
     */
    public function unlockUser(
        string $userId,
    ): \Clerk\Backend\Models\Operations\UnlockUserResponse {
        $request = new \Clerk\Backend\Models\Operations\UnlockUserRequest();
        $request->userId = $userId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/unlock', \Clerk\Backend\Models\Operations\UnlockUserRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\UnlockUserResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\User', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Set user profile image
     *
     * Update a user's profile image
     *
     * @param  string  $userId
     * @param  \Clerk\Backend\Models\Operations\SetUserProfileImageRequestBody  $requestBody
     * @return \Clerk\Backend\Models\Operations\SetUserProfileImageResponse
     */
    public function setUserProfileImage(
        string $userId,
        \Clerk\Backend\Models\Operations\SetUserProfileImageRequestBody $requestBody,
    ): \Clerk\Backend\Models\Operations\SetUserProfileImageResponse {
        $request = new \Clerk\Backend\Models\Operations\SetUserProfileImageRequest();
        $request->userId = $userId;
        $request->requestBody = $requestBody;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/profile_image', \Clerk\Backend\Models\Operations\SetUserProfileImageRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'multipart');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\SetUserProfileImageResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\User', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Delete user profile image
     *
     * Delete a user's profile image
     *
     * @param  string  $userId
     * @return \Clerk\Backend\Models\Operations\DeleteUserProfileImageResponse
     */
    public function deleteUserProfileImage(
        string $userId,
    ): \Clerk\Backend\Models\Operations\DeleteUserProfileImageResponse {
        $request = new \Clerk\Backend\Models\Operations\DeleteUserProfileImageRequest();
        $request->userId = $userId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/profile_image', \Clerk\Backend\Models\Operations\DeleteUserProfileImageRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\DeleteUserProfileImageResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\User', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Merge and update a user's metadata
     *
     * Update a user's metadata attributes by merging existing values with the provided parameters.
     *
     * This endpoint behaves differently than the *Update a user* endpoint.
     * Metadata values will not be replaced entirely.
     * Instead, a deep merge will be performed.
     * Deep means that any nested JSON objects will be merged as well.
     *
     * You can remove metadata keys at any level by setting their value to `null`.
     *
     * @param  string  $userId
     * @param  ?\Clerk\Backend\Models\Operations\UpdateUserMetadataRequestBody  $requestBody
     * @return \Clerk\Backend\Models\Operations\UpdateUserMetadataResponse
     */
    public function updateUserMetadata(
        string $userId,
        ?\Clerk\Backend\Models\Operations\UpdateUserMetadataRequestBody $requestBody = null,
    ): \Clerk\Backend\Models\Operations\UpdateUserMetadataResponse {
        $request = new \Clerk\Backend\Models\Operations\UpdateUserMetadataRequest();
        $request->userId = $userId;
        $request->requestBody = $requestBody;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/metadata', \Clerk\Backend\Models\Operations\UpdateUserMetadataRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PATCH', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\UpdateUserMetadataResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\User', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Retrieve the OAuth access token of a user
     *
     * Fetch the corresponding OAuth access token for a user that has previously authenticated with a particular OAuth provider.
     * For OAuth 2.0, if the access token has expired and we have a corresponding refresh token, the access token will be refreshed transparently the new one will be returned.
     *
     * @param  string  $userId
     * @param  string  $provider
     * @return \Clerk\Backend\Models\Operations\GetOAuthAccessTokenResponse
     */
    public function getOAuthAccessToken(
        string $userId,
        string $provider,
    ): \Clerk\Backend\Models\Operations\GetOAuthAccessTokenResponse {
        $request = new \Clerk\Backend\Models\Operations\GetOAuthAccessTokenRequest();
        $request->userId = $userId;
        $request->provider = $provider;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/oauth_access_tokens/{provider}', \Clerk\Backend\Models\Operations\GetOAuthAccessTokenRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\GetOAuthAccessTokenResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responseBodies = $serializer->deserialize((string) $httpResponse->getBody(), 'array<Clerk\Backend\Models\Operations\ResponseBody>', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Retrieve all memberships for a user
     *
     * Retrieve a paginated list of the user's organization memberships
     *
     * @param  string  $userId
     * @param  ?float  $limit
     * @param  ?float  $offset
     * @return \Clerk\Backend\Models\Operations\UsersGetOrganizationMembershipsResponse
     */
    public function usersGetOrganizationMemberships(
        string $userId,
        ?float $limit = null,
        ?float $offset = null,
    ): \Clerk\Backend\Models\Operations\UsersGetOrganizationMembershipsResponse {
        $request = new \Clerk\Backend\Models\Operations\UsersGetOrganizationMembershipsRequest();
        $request->userId = $userId;
        $request->limit = $limit;
        $request->offset = $offset;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/organization_memberships', \Clerk\Backend\Models\Operations\UsersGetOrganizationMembershipsRequest::class, $request);
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Clerk\Backend\Models\Operations\UsersGetOrganizationMembershipsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\UsersGetOrganizationMembershipsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationMemberships = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\OrganizationMemberships', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Verify the password of a user
     *
     * Check that the user's password matches the supplied input.
     * Useful for custom auth flows and re-verification.
     *
     * @param  string  $userId
     * @param  ?\Clerk\Backend\Models\Operations\VerifyPasswordRequestBody  $requestBody
     * @return \Clerk\Backend\Models\Operations\VerifyPasswordResponse
     */
    public function verifyPassword(
        string $userId,
        ?\Clerk\Backend\Models\Operations\VerifyPasswordRequestBody $requestBody = null,
    ): \Clerk\Backend\Models\Operations\VerifyPasswordResponse {
        $request = new \Clerk\Backend\Models\Operations\VerifyPasswordRequest();
        $request->userId = $userId;
        $request->requestBody = $requestBody;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/verify_password', \Clerk\Backend\Models\Operations\VerifyPasswordRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\VerifyPasswordResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Operations\VerifyPasswordResponseBody', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
        } elseif ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Verify a TOTP or backup code for a user
     *
     * Verify that the provided TOTP or backup code is valid for the user.
     * Verifying a backup code will result it in being consumed (i.e. it will
     * become invalid).
     * Useful for custom auth flows and re-verification.
     *
     * @param  string  $userId
     * @param  ?\Clerk\Backend\Models\Operations\VerifyTOTPRequestBody  $requestBody
     * @return \Clerk\Backend\Models\Operations\VerifyTOTPResponse
     */
    public function verifyTOTP(
        string $userId,
        ?\Clerk\Backend\Models\Operations\VerifyTOTPRequestBody $requestBody = null,
    ): \Clerk\Backend\Models\Operations\VerifyTOTPResponse {
        $request = new \Clerk\Backend\Models\Operations\VerifyTOTPRequest();
        $request->userId = $userId;
        $request->requestBody = $requestBody;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/verify_totp', \Clerk\Backend\Models\Operations\VerifyTOTPRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\VerifyTOTPResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Operations\VerifyTOTPResponseBody', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
        } elseif ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Disable a user's MFA methods
     *
     * Disable all of a user's MFA methods (e.g. OTP sent via SMS, TOTP on their authenticator app) at once.
     *
     * @param  string  $userId
     * @return \Clerk\Backend\Models\Operations\DisableMFAResponse
     */
    public function disableMFA(
        string $userId,
    ): \Clerk\Backend\Models\Operations\DisableMFAResponse {
        $request = new \Clerk\Backend\Models\Operations\DisableMFARequest();
        $request->userId = $userId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/mfa', \Clerk\Backend\Models\Operations\DisableMFARequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\DisableMFAResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Operations\DisableMFAResponseBody', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }
}