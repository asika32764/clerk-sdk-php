<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Clerk\Backend;

class OAuthApplications
{
    private SDKConfiguration $sdkConfiguration;

    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * Get a list of OAuth applications for an instance
     *
     * This request returns the list of OAuth applications for an instance.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The OAuth applications are ordered by descending creation date.
     * Most recent OAuth applications will be returned first.
     *
     * @param  ?float  $limit
     * @param  ?float  $offset
     * @return \Clerk\Backend\Models\Operations\ListOAuthApplicationsResponse
     */
    public function listOAuthApplications(
        ?float $limit = null,
        ?float $offset = null,
    ): \Clerk\Backend\Models\Operations\ListOAuthApplicationsResponse {
        $request = new \Clerk\Backend\Models\Operations\ListOAuthApplicationsRequest();
        $request->limit = $limit;
        $request->offset = $offset;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/oauth_applications');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Clerk\Backend\Models\Operations\ListOAuthApplicationsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\ListOAuthApplicationsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oAuthApplications = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\OAuthApplications', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Create an OAuth application
     *
     * Creates a new OAuth application with the given name and callback URL for an instance.
     * The callback URL must be a valid url.
     * All URL schemes are allowed such as `http://`, `https://`, `myapp://`, etc...
     *
     * @param  \Clerk\Backend\Models\Operations\CreateOAuthApplicationRequestBody  $request
     * @return \Clerk\Backend\Models\Operations\CreateOAuthApplicationResponse
     */
    public function createOAuthApplication(
        ?\Clerk\Backend\Models\Operations\CreateOAuthApplicationRequestBody $request,
    ): \Clerk\Backend\Models\Operations\CreateOAuthApplicationResponse {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/oauth_applications');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\CreateOAuthApplicationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oAuthApplicationWithSecret = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\OAuthApplicationWithSecret', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Retrieve an OAuth application by ID
     *
     * Fetches the OAuth application whose ID matches the provided `id` in the path.
     *
     * @param  string  $oauthApplicationId
     * @return \Clerk\Backend\Models\Operations\GetOAuthApplicationResponse
     */
    public function getOAuthApplication(
        string $oauthApplicationId,
    ): \Clerk\Backend\Models\Operations\GetOAuthApplicationResponse {
        $request = new \Clerk\Backend\Models\Operations\GetOAuthApplicationRequest();
        $request->oauthApplicationId = $oauthApplicationId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/oauth_applications/{oauth_application_id}', \Clerk\Backend\Models\Operations\GetOAuthApplicationRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\GetOAuthApplicationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oAuthApplication = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\OAuthApplication', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Update an OAuth application
     *
     * Updates an existing OAuth application
     *
     * @param  string  $oauthApplicationId
     * @param  \Clerk\Backend\Models\Operations\UpdateOAuthApplicationRequestBody  $requestBody
     * @return \Clerk\Backend\Models\Operations\UpdateOAuthApplicationResponse
     */
    public function updateOAuthApplication(
        string $oauthApplicationId,
        \Clerk\Backend\Models\Operations\UpdateOAuthApplicationRequestBody $requestBody,
    ): \Clerk\Backend\Models\Operations\UpdateOAuthApplicationResponse {
        $request = new \Clerk\Backend\Models\Operations\UpdateOAuthApplicationRequest();
        $request->oauthApplicationId = $oauthApplicationId;
        $request->requestBody = $requestBody;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/oauth_applications/{oauth_application_id}', \Clerk\Backend\Models\Operations\UpdateOAuthApplicationRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PATCH', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\UpdateOAuthApplicationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oAuthApplication = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\OAuthApplication', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Delete an OAuth application
     *
     * Deletes the given OAuth application.
     * This is not reversible.
     *
     * @param  string  $oauthApplicationId
     * @return \Clerk\Backend\Models\Operations\DeleteOAuthApplicationResponse
     */
    public function deleteOAuthApplication(
        string $oauthApplicationId,
    ): \Clerk\Backend\Models\Operations\DeleteOAuthApplicationResponse {
        $request = new \Clerk\Backend\Models\Operations\DeleteOAuthApplicationRequest();
        $request->oauthApplicationId = $oauthApplicationId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/oauth_applications/{oauth_application_id}', \Clerk\Backend\Models\Operations\DeleteOAuthApplicationRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\DeleteOAuthApplicationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deletedObject = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\DeletedObject', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Rotate the client secret of the given OAuth application
     *
     * Rotates the OAuth application's client secret.
     * When the client secret is rotated, make sure to update it in authorized OAuth clients.
     *
     * @param  string  $oauthApplicationId
     * @return \Clerk\Backend\Models\Operations\RotateOAuthApplicationSecretResponse
     */
    public function rotateOAuthApplicationSecret(
        string $oauthApplicationId,
    ): \Clerk\Backend\Models\Operations\RotateOAuthApplicationSecretResponse {
        $request = new \Clerk\Backend\Models\Operations\RotateOAuthApplicationSecretRequest();
        $request->oauthApplicationId = $oauthApplicationId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/oauth_applications/{oauth_application_id}/rotate_secret', \Clerk\Backend\Models\Operations\RotateOAuthApplicationSecretRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\RotateOAuthApplicationSecretResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->oAuthApplicationWithSecret = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\OAuthApplicationWithSecret', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }
}