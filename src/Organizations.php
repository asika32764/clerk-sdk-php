<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Clerk\Backend;

class Organizations
{
    private SDKConfiguration $sdkConfiguration;

    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * Get a list of organizations for an instance
     *
     * This request returns the list of organizations for an instance.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The organizations are ordered by descending creation date.
     * Most recent organizations will be returned first.
     *
     * @param  \Clerk\Backend\Models\Operations\ListOrganizationsRequest  $request
     * @return \Clerk\Backend\Models\Operations\ListOrganizationsResponse
     */
    public function listOrganizations(
        ?\Clerk\Backend\Models\Operations\ListOrganizationsRequest $request,
    ): \Clerk\Backend\Models\Operations\ListOrganizationsResponse {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Clerk\Backend\Models\Operations\ListOrganizationsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\ListOrganizationsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizations = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\Organizations', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Create an organization
     *
     * Creates a new organization with the given name for an instance.
     * In order to successfully create an organization you need to provide the ID of the User who will become the organization administrator.
     * You can specify an optional slug for the new organization.
     * If provided, the organization slug can contain only lowercase alphanumeric characters (letters and digits) and the dash "-".
     * Organization slugs must be unique for the instance.
     * You can provide additional metadata for the organization and set any custom attribute you want.
     * Organizations support private and public metadata.
     * Private metadata can only be accessed from the Backend API.
     * Public metadata can be accessed from the Backend API, and are read-only from the Frontend API.
     *
     * @param  \Clerk\Backend\Models\Operations\CreateOrganizationRequestBody  $request
     * @return \Clerk\Backend\Models\Operations\CreateOrganizationResponse
     */
    public function createOrganization(
        ?\Clerk\Backend\Models\Operations\CreateOrganizationRequestBody $request,
    ): \Clerk\Backend\Models\Operations\CreateOrganizationResponse {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\CreateOrganizationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organization = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\Organization', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Retrieve an organization by ID or slug
     *
     * Fetches the organization whose ID or slug matches the provided `id_or_slug` URL query parameter.
     *
     * @param  string  $organizationId
     * @return \Clerk\Backend\Models\Operations\GetOrganizationResponse
     */
    public function getOrganization(
        string $organizationId,
    ): \Clerk\Backend\Models\Operations\GetOrganizationResponse {
        $request = new \Clerk\Backend\Models\Operations\GetOrganizationRequest();
        $request->organizationId = $organizationId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}', \Clerk\Backend\Models\Operations\GetOrganizationRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\GetOrganizationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organization = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\Organization', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Update an organization
     *
     * Updates an existing organization
     *
     * @param  string  $organizationId
     * @param  \Clerk\Backend\Models\Operations\UpdateOrganizationRequestBody  $requestBody
     * @return \Clerk\Backend\Models\Operations\UpdateOrganizationResponse
     */
    public function updateOrganization(
        string $organizationId,
        \Clerk\Backend\Models\Operations\UpdateOrganizationRequestBody $requestBody,
    ): \Clerk\Backend\Models\Operations\UpdateOrganizationResponse {
        $request = new \Clerk\Backend\Models\Operations\UpdateOrganizationRequest();
        $request->organizationId = $organizationId;
        $request->requestBody = $requestBody;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}', \Clerk\Backend\Models\Operations\UpdateOrganizationRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PATCH', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\UpdateOrganizationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organization = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\Organization', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 402 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Delete an organization
     *
     * Deletes the given organization.
     * Please note that deleting an organization will also delete all memberships and invitations.
     * This is not reversible.
     *
     * @param  string  $organizationId
     * @return \Clerk\Backend\Models\Operations\DeleteOrganizationResponse
     */
    public function deleteOrganization(
        string $organizationId,
    ): \Clerk\Backend\Models\Operations\DeleteOrganizationResponse {
        $request = new \Clerk\Backend\Models\Operations\DeleteOrganizationRequest();
        $request->organizationId = $organizationId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}', \Clerk\Backend\Models\Operations\DeleteOrganizationRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\DeleteOrganizationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deletedObject = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\DeletedObject', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Merge and update metadata for an organization
     *
     * Update organization metadata attributes by merging existing values with the provided parameters.
     * Metadata values will be updated via a deep merge.
     * Deep meaning that any nested JSON objects will be merged as well.
     * You can remove metadata keys at any level by setting their value to `null`.
     *
     * @param  string  $organizationId
     * @param  \Clerk\Backend\Models\Operations\MergeOrganizationMetadataRequestBody  $requestBody
     * @return \Clerk\Backend\Models\Operations\MergeOrganizationMetadataResponse
     */
    public function mergeOrganizationMetadata(
        string $organizationId,
        \Clerk\Backend\Models\Operations\MergeOrganizationMetadataRequestBody $requestBody,
    ): \Clerk\Backend\Models\Operations\MergeOrganizationMetadataResponse {
        $request = new \Clerk\Backend\Models\Operations\MergeOrganizationMetadataRequest();
        $request->organizationId = $organizationId;
        $request->requestBody = $requestBody;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/metadata', \Clerk\Backend\Models\Operations\MergeOrganizationMetadataRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PATCH', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\MergeOrganizationMetadataResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organization = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\Organization', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Upload a logo for the organization
     *
     * Set or replace an organization's logo, by uploading an image file.
     * This endpoint uses the `multipart/form-data` request content type and accepts a file of image type.
     * The file size cannot exceed 10MB.
     * Only the following file content types are supported: `image/jpeg`, `image/png`, `image/gif`, `image/webp`, `image/x-icon`, `image/vnd.microsoft.icon`.
     *
     * @param  string  $organizationId
     * @param  ?\Clerk\Backend\Models\Operations\UploadOrganizationLogoRequestBody  $requestBody
     * @return \Clerk\Backend\Models\Operations\UploadOrganizationLogoResponse
     */
    public function uploadOrganizationLogo(
        string $organizationId,
        ?\Clerk\Backend\Models\Operations\UploadOrganizationLogoRequestBody $requestBody = null,
    ): \Clerk\Backend\Models\Operations\UploadOrganizationLogoResponse {
        $request = new \Clerk\Backend\Models\Operations\UploadOrganizationLogoRequest();
        $request->organizationId = $organizationId;
        $request->requestBody = $requestBody;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/logo', \Clerk\Backend\Models\Operations\UploadOrganizationLogoRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'multipart');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\UploadOrganizationLogoResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationWithLogo = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\OrganizationWithLogo', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 413) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Delete the organization's logo.
     *
     * @param  string  $organizationId
     * @return \Clerk\Backend\Models\Operations\DeleteOrganizationLogoResponse
     */
    public function deleteOrganizationLogo(
        string $organizationId,
    ): \Clerk\Backend\Models\Operations\DeleteOrganizationLogoResponse {
        $request = new \Clerk\Backend\Models\Operations\DeleteOrganizationLogoRequest();
        $request->organizationId = $organizationId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/logo', \Clerk\Backend\Models\Operations\DeleteOrganizationLogoRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\DeleteOrganizationLogoResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organization = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\Organization', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }
}