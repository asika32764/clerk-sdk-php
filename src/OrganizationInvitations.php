<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Clerk\Backend;

class OrganizationInvitations
{
    private SDKConfiguration $sdkConfiguration;

    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * Create and send an organization invitation
     *
     * Creates a new organization invitation and sends an email to the provided `email_address` with a link to accept the invitation and join the organization.
     * You can specify the `role` for the invited organization member.
     *
     * New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
     *
     * The request body supports passing an optional `redirect_url` parameter.
     * When the invited user clicks the link to accept the invitation, they will be redirected to the URL provided.
     * Use this parameter to implement a custom invitation acceptance flow.
     *
     * You must specify the ID of the user that will send the invitation with the `inviter_user_id` parameter.
     * That user must be a member with administrator privileges in the organization.
     * Only "admin" members can create organization invitations.
     *
     * You can optionally provide public and private metadata for the organization invitation.
     * The public metadata are visible by both the Frontend and the Backend whereas the private ones only by the Backend.
     * When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
     *
     * @param  string  $organizationId
     * @param  \Clerk\Backend\Models\Operations\CreateOrganizationInvitationRequestBody  $requestBody
     * @return \Clerk\Backend\Models\Operations\CreateOrganizationInvitationResponse
     */
    public function createOrganizationInvitation(
        string $organizationId,
        \Clerk\Backend\Models\Operations\CreateOrganizationInvitationRequestBody $requestBody,
    ): \Clerk\Backend\Models\Operations\CreateOrganizationInvitationResponse {
        $request = new \Clerk\Backend\Models\Operations\CreateOrganizationInvitationRequest();
        $request->organizationId = $organizationId;
        $request->requestBody = $requestBody;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/invitations', \Clerk\Backend\Models\Operations\CreateOrganizationInvitationRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\CreateOrganizationInvitationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationInvitation = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\OrganizationInvitation', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Get a list of organization invitations
     *
     * This request returns the list of organization invitations.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * You can filter them by providing the 'status' query parameter, that accepts multiple values.
     * The organization invitations are ordered by descending creation date.
     * Most recent invitations will be returned first.
     * Any invitations created as a result of an Organization Domain are not included in the results.
     *
     * @param  string  $organizationId
     * @param  ?float  $limit
     * @param  ?float  $offset
     * @param  ?\Clerk\Backend\Models\Operations\ListOrganizationInvitationsQueryParamStatus  $status
     * @return \Clerk\Backend\Models\Operations\ListOrganizationInvitationsResponse
     */
    public function listOrganizationInvitations(
        string $organizationId,
        ?float $limit = null,
        ?float $offset = null,
        ?\Clerk\Backend\Models\Operations\ListOrganizationInvitationsQueryParamStatus $status = null,
    ): \Clerk\Backend\Models\Operations\ListOrganizationInvitationsResponse {
        $request = new \Clerk\Backend\Models\Operations\ListOrganizationInvitationsRequest();
        $request->organizationId = $organizationId;
        $request->limit = $limit;
        $request->offset = $offset;
        $request->status = $status;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/invitations', \Clerk\Backend\Models\Operations\ListOrganizationInvitationsRequest::class, $request);
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Clerk\Backend\Models\Operations\ListOrganizationInvitationsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\ListOrganizationInvitationsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationInvitations = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\OrganizationInvitations', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Bulk create and send organization invitations
     *
     * Creates new organization invitations in bulk and sends out emails to the provided email addresses with a link to accept the invitation and join the organization.
     * You can specify a different `role` for each invited organization member.
     * New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
     * The request body supports passing an optional `redirect_url` parameter for each invitation.
     * When the invited user clicks the link to accept the invitation, they will be redirected to the provided URL.
     * Use this parameter to implement a custom invitation acceptance flow.
     * You must specify the ID of the user that will send the invitation with the `inviter_user_id` parameter. Each invitation
     * can have a different inviter user.
     * Inviter users must be members with administrator privileges in the organization.
     * Only "admin" members can create organization invitations.
     * You can optionally provide public and private metadata for each organization invitation. The public metadata are visible
     * by both the Frontend and the Backend, whereas the private metadata are only visible by the Backend.
     * When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
     *
     * @param  string  $organizationId
     * @param  array<\Clerk\Backend\Models\Operations\RequestBody>  $requestBody
     * @return \Clerk\Backend\Models\Operations\CreateOrganizationInvitationBulkResponse
     */
    public function createOrganizationInvitationBulk(
        string $organizationId,
        array $requestBody,
    ): \Clerk\Backend\Models\Operations\CreateOrganizationInvitationBulkResponse {
        $request = new \Clerk\Backend\Models\Operations\CreateOrganizationInvitationBulkRequest();
        $request->organizationId = $organizationId;
        $request->requestBody = $requestBody;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/invitations/bulk', \Clerk\Backend\Models\Operations\CreateOrganizationInvitationBulkRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\CreateOrganizationInvitationBulkResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationInvitations = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\OrganizationInvitations', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Get a list of pending organization invitations
     *
     * This request returns the list of organization invitations with "pending" status.
     * These are the organization invitations that can still be used to join the organization, but have not been accepted by the invited user yet.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The organization invitations are ordered by descending creation date.
     * Most recent invitations will be returned first.
     * Any invitations created as a result of an Organization Domain are not included in the results.
     *
     * @param  string  $organizationId
     * @param  ?float  $limit
     * @param  ?float  $offset
     * @return \Clerk\Backend\Models\Operations\ListPendingOrganizationInvitationsResponse
     * @deprecated  method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    public function listPendingOrganizationInvitations(
        string $organizationId,
        ?float $limit = null,
        ?float $offset = null,
    ): \Clerk\Backend\Models\Operations\ListPendingOrganizationInvitationsResponse {
        trigger_error('Method '.__METHOD__.' is deprecated', E_USER_DEPRECATED);
        $request = new \Clerk\Backend\Models\Operations\ListPendingOrganizationInvitationsRequest();
        $request->organizationId = $organizationId;
        $request->limit = $limit;
        $request->offset = $offset;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/invitations/pending', \Clerk\Backend\Models\Operations\ListPendingOrganizationInvitationsRequest::class, $request);
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Clerk\Backend\Models\Operations\ListPendingOrganizationInvitationsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\ListPendingOrganizationInvitationsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationInvitations = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\OrganizationInvitations', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Retrieve an organization invitation by ID
     *
     * Use this request to get an existing organization invitation by ID.
     *
     * @param  string  $organizationId
     * @param  string  $invitationId
     * @return \Clerk\Backend\Models\Operations\GetOrganizationInvitationResponse
     */
    public function getOrganizationInvitation(
        string $organizationId,
        string $invitationId,
    ): \Clerk\Backend\Models\Operations\GetOrganizationInvitationResponse {
        $request = new \Clerk\Backend\Models\Operations\GetOrganizationInvitationRequest();
        $request->organizationId = $organizationId;
        $request->invitationId = $invitationId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/invitations/{invitation_id}', \Clerk\Backend\Models\Operations\GetOrganizationInvitationRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\GetOrganizationInvitationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationInvitation = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\OrganizationInvitation', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Revoke a pending organization invitation
     *
     * Use this request to revoke a previously issued organization invitation.
     * Revoking an organization invitation makes it invalid; the invited user will no longer be able to join the organization with the revoked invitation.
     * Only organization invitations with "pending" status can be revoked.
     * The request needs the `requesting_user_id` parameter to specify the user which revokes the invitation.
     * Only users with "admin" role can revoke invitations.
     *
     * @param  string  $organizationId
     * @param  string  $invitationId
     * @param  \Clerk\Backend\Models\Operations\RevokeOrganizationInvitationRequestBody  $requestBody
     * @return \Clerk\Backend\Models\Operations\RevokeOrganizationInvitationResponse
     */
    public function revokeOrganizationInvitation(
        string $organizationId,
        string $invitationId,
        \Clerk\Backend\Models\Operations\RevokeOrganizationInvitationRequestBody $requestBody,
    ): \Clerk\Backend\Models\Operations\RevokeOrganizationInvitationResponse {
        $request = new \Clerk\Backend\Models\Operations\RevokeOrganizationInvitationRequest();
        $request->organizationId = $organizationId;
        $request->invitationId = $invitationId;
        $request->requestBody = $requestBody;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/invitations/{invitation_id}/revoke', \Clerk\Backend\Models\Operations\RevokeOrganizationInvitationRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\RevokeOrganizationInvitationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationInvitation = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\OrganizationInvitation', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }
}