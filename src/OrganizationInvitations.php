<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Clerk\Backend;

use Clerk\Backend\Models\Operations;
use Speakeasy\Serializer\DeserializationContext;

class OrganizationInvitations
{
    private SDKConfiguration $sdkConfiguration;
    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(public SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * Create and send an organization invitation
     *
     * Creates a new organization invitation and sends an email to the provided `email_address` with a link to accept the invitation and join the organization.
     * You can specify the `role` for the invited organization member.
     *
     * New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
     *
     * The request body supports passing an optional `redirect_url` parameter.
     * When the invited user clicks the link to accept the invitation, they will be redirected to the URL provided.
     * Use this parameter to implement a custom invitation acceptance flow.
     *
     * You must specify the ID of the user that will send the invitation with the `inviter_user_id` parameter.
     * That user must be a member with administrator privileges in the organization.
     * Only "admin" members can create organization invitations.
     *
     * You can optionally provide public and private metadata for the organization invitation.
     * The public metadata are visible by both the Frontend and the Backend whereas the private ones only by the Backend.
     * When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
     *
     * @param  Operations\CreateOrganizationInvitationRequestBody  $requestBody
     * @param  string  $organizationId
     * @return Operations\CreateOrganizationInvitationResponse
     * @throws \Clerk\Backend\Models\Errors\SDKException
     */
    public function createOrganizationInvitation(Operations\CreateOrganizationInvitationRequestBody $requestBody, string $organizationId): Operations\CreateOrganizationInvitationResponse
    {
        $request = new Operations\CreateOrganizationInvitationRequest(
            organizationId: $organizationId,
            requestBody: $requestBody,
        );
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/invitations', Operations\CreateOrganizationInvitationRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Clerk\Backend\Models\Components\OrganizationInvitation', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\CreateOrganizationInvitationResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    organizationInvitation: $obj);

                return $response;
            } else {
                throw new \Clerk\Backend\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif (in_array($statusCode, [400, 403, 404, 422])) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Clerk\Backend\Models\Errors\ClerkErrors63', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                throw $obj->toException();
            } else {
                throw new \Clerk\Backend\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \Clerk\Backend\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Clerk\Backend\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * Get a list of organization invitations
     *
     * This request returns the list of organization invitations.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * You can filter them by providing the 'status' query parameter, that accepts multiple values.
     * The organization invitations are ordered by descending creation date.
     * Most recent invitations will be returned first.
     * Any invitations created as a result of an Organization Domain are not included in the results.
     *
     * @param  string  $organizationId
     * @param  ?float  $limit
     * @param  ?float  $offset
     * @param  ?Operations\ListOrganizationInvitationsQueryParamStatus  $status
     * @return Operations\ListOrganizationInvitationsResponse
     * @throws \Clerk\Backend\Models\Errors\SDKException
     */
    public function listOrganizationInvitations(string $organizationId, ?float $limit = null, ?float $offset = null, ?Operations\ListOrganizationInvitationsQueryParamStatus $status = null): Operations\ListOrganizationInvitationsResponse
    {
        $request = new Operations\ListOrganizationInvitationsRequest(
            organizationId: $organizationId,
            limit: $limit,
            offset: $offset,
            status: $status,
        );
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/invitations', Operations\ListOrganizationInvitationsRequest::class, $request);
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\ListOrganizationInvitationsRequest::class, $request));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Clerk\Backend\Models\Components\OrganizationInvitations', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\ListOrganizationInvitationsResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    organizationInvitations: $obj);

                return $response;
            } else {
                throw new \Clerk\Backend\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif (in_array($statusCode, [400, 404])) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Clerk\Backend\Models\Errors\ClerkErrors64', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                throw $obj->toException();
            } else {
                throw new \Clerk\Backend\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \Clerk\Backend\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Clerk\Backend\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * Bulk create and send organization invitations
     *
     * Creates new organization invitations in bulk and sends out emails to the provided email addresses with a link to accept the invitation and join the organization.
     * You can specify a different `role` for each invited organization member.
     * New organization invitations get a "pending" status until they are revoked by an organization administrator or accepted by the invitee.
     * The request body supports passing an optional `redirect_url` parameter for each invitation.
     * When the invited user clicks the link to accept the invitation, they will be redirected to the provided URL.
     * Use this parameter to implement a custom invitation acceptance flow.
     * You must specify the ID of the user that will send the invitation with the `inviter_user_id` parameter. Each invitation
     * can have a different inviter user.
     * Inviter users must be members with administrator privileges in the organization.
     * Only "admin" members can create organization invitations.
     * You can optionally provide public and private metadata for each organization invitation. The public metadata are visible
     * by both the Frontend and the Backend, whereas the private metadata are only visible by the Backend.
     * When the organization invitation is accepted, the metadata will be transferred to the newly created organization membership.
     *
     * @param  array<Operations\RequestBody>  $requestBody
     * @param  string  $organizationId
     * @return Operations\CreateOrganizationInvitationBulkResponse
     * @throws \Clerk\Backend\Models\Errors\SDKException
     */
    public function createOrganizationInvitationBulk(array $requestBody, string $organizationId): Operations\CreateOrganizationInvitationBulkResponse
    {
        $request = new Operations\CreateOrganizationInvitationBulkRequest(
            organizationId: $organizationId,
            requestBody: $requestBody,
        );
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/invitations/bulk', Operations\CreateOrganizationInvitationBulkRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Clerk\Backend\Models\Components\OrganizationInvitations', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\CreateOrganizationInvitationBulkResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    organizationInvitations: $obj);

                return $response;
            } else {
                throw new \Clerk\Backend\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif (in_array($statusCode, [400, 403, 404, 422])) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Clerk\Backend\Models\Errors\ClerkErrors65', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                throw $obj->toException();
            } else {
                throw new \Clerk\Backend\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \Clerk\Backend\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Clerk\Backend\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * Get a list of pending organization invitations
     *
     * This request returns the list of organization invitations with "pending" status.
     * These are the organization invitations that can still be used to join the organization, but have not been accepted by the invited user yet.
     * Results can be paginated using the optional `limit` and `offset` query parameters.
     * The organization invitations are ordered by descending creation date.
     * Most recent invitations will be returned first.
     * Any invitations created as a result of an Organization Domain are not included in the results.
     *
     * @param  string  $organizationId
     * @param  ?float  $limit
     * @param  ?float  $offset
     * @return Operations\ListPendingOrganizationInvitationsResponse
     * @throws \Clerk\Backend\Models\Errors\SDKException
     * @deprecated  method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    public function listPendingOrganizationInvitations(string $organizationId, ?float $limit = null, ?float $offset = null): Operations\ListPendingOrganizationInvitationsResponse
    {
        trigger_error('Method '.__METHOD__.' is deprecated', E_USER_DEPRECATED);
        $request = new Operations\ListPendingOrganizationInvitationsRequest(
            organizationId: $organizationId,
            limit: $limit,
            offset: $offset,
        );
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/invitations/pending', Operations\ListPendingOrganizationInvitationsRequest::class, $request);
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(Operations\ListPendingOrganizationInvitationsRequest::class, $request));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Clerk\Backend\Models\Components\OrganizationInvitations', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\ListPendingOrganizationInvitationsResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    organizationInvitations: $obj);

                return $response;
            } else {
                throw new \Clerk\Backend\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif (in_array($statusCode, [400, 404])) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Clerk\Backend\Models\Errors\ClerkErrors66', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                throw $obj->toException();
            } else {
                throw new \Clerk\Backend\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \Clerk\Backend\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Clerk\Backend\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * Retrieve an organization invitation by ID
     *
     * Use this request to get an existing organization invitation by ID.
     *
     * @param  string  $organizationId
     * @param  string  $invitationId
     * @return Operations\GetOrganizationInvitationResponse
     * @throws \Clerk\Backend\Models\Errors\SDKException
     */
    public function getOrganizationInvitation(string $organizationId, string $invitationId): Operations\GetOrganizationInvitationResponse
    {
        $request = new Operations\GetOrganizationInvitationRequest(
            organizationId: $organizationId,
            invitationId: $invitationId,
        );
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/invitations/{invitation_id}', Operations\GetOrganizationInvitationRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('GET', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Clerk\Backend\Models\Components\OrganizationInvitation', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\GetOrganizationInvitationResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    organizationInvitation: $obj);

                return $response;
            } else {
                throw new \Clerk\Backend\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif (in_array($statusCode, [400, 403, 404])) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Clerk\Backend\Models\Errors\ClerkErrors67', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                throw $obj->toException();
            } else {
                throw new \Clerk\Backend\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \Clerk\Backend\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Clerk\Backend\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

    /**
     * Revoke a pending organization invitation
     *
     * Use this request to revoke a previously issued organization invitation.
     * Revoking an organization invitation makes it invalid; the invited user will no longer be able to join the organization with the revoked invitation.
     * Only organization invitations with "pending" status can be revoked.
     * The request needs the `requesting_user_id` parameter to specify the user which revokes the invitation.
     * Only users with "admin" role can revoke invitations.
     *
     * @param  Operations\RevokeOrganizationInvitationRequestBody  $requestBody
     * @param  string  $organizationId
     * @param  string  $invitationId
     * @return Operations\RevokeOrganizationInvitationResponse
     * @throws \Clerk\Backend\Models\Errors\SDKException
     */
    public function revokeOrganizationInvitation(Operations\RevokeOrganizationInvitationRequestBody $requestBody, string $organizationId, string $invitationId): Operations\RevokeOrganizationInvitationResponse
    {
        $request = new Operations\RevokeOrganizationInvitationRequest(
            organizationId: $organizationId,
            invitationId: $invitationId,
            requestBody: $requestBody,
        );
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/invitations/{invitation_id}/revoke', Operations\RevokeOrganizationInvitationRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        $httpRequest = new \GuzzleHttp\Psr7\Request('POST', $url);


        $httpResponse = $this->sdkConfiguration->securityClient->send($httpRequest, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();
        if ($statusCode == 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Clerk\Backend\Models\Components\OrganizationInvitation', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                $response = new Operations\RevokeOrganizationInvitationResponse(
                    statusCode: $statusCode,
                    contentType: $contentType,
                    rawResponse: $httpResponse,
                    organizationInvitation: $obj);

                return $response;
            } else {
                throw new \Clerk\Backend\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif (in_array($statusCode, [400, 403, 404])) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $obj = $serializer->deserialize((string) $httpResponse->getBody(), '\Clerk\Backend\Models\Errors\ClerkErrors68', 'json', DeserializationContext::create()->setRequireAllRequiredProperties(true));
                throw $obj->toException();
            } else {
                throw new \Clerk\Backend\Models\Errors\SDKException('Unknown content type received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
            }
        } elseif ($statusCode >= 400 && $statusCode < 500 || $statusCode >= 500 && $statusCode < 600) {
            throw new \Clerk\Backend\Models\Errors\SDKException('API error occurred', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        } else {
            throw new \Clerk\Backend\Models\Errors\SDKException('Unknown status code received', $statusCode, $httpResponse->getBody()->getContents(), $httpResponse);
        }
    }

}