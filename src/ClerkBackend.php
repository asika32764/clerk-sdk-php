<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Clerk\Backend;



/**
 * ClerkBackend - Clerk Backend API: The Clerk REST Backend API, meant to be accessed by backend
 *
 * servers.
 *
 * ### Versions
 *
 * When the API changes in a way that isn't compatible with older versions, a new version is released.
 * Each version is identified by its release date, e.g. `2021-02-05`. For more information, please see [Clerk API Versions](https://clerk.com/docs/backend-requests/versioning/overview).
 *
 *
 * Please see https://clerk.com/docs for more information.
 * https://clerk.com/docs
 *
 * @see https://clerk.com/docs
 */
class ClerkBackend
{
    public const SERVERS = [
        'https://api.clerk.com/v1',
    ];

    /**
     * Various endpoints that do not belong in any particular category.
     *
     * @var Miscellaneous $$miscellaneous
     */
    public Miscellaneous $miscellaneous;

    /**
     * Retrieve the JSON Web Key Set which can be used to verify the token signatures of the instance.
     *
     * @var Jwks $$jwks
     */
    public Jwks $jwks;

    /**
     * The Client object tracks sessions, as well as the state of any sign in and sign up attempts, for a given device.
     *
     * @var Clients $$clients
     */
    public Clients $clients;

    /**
     * A user can be associated with one or more email addresses, which allows them to be contacted via email.
     *
     * @var EmailAddresses $$emailAddresses
     */
    public EmailAddresses $emailAddresses;

    /**
     * A user can be associated with one or more phone numbers, which allows them to be contacted via SMS.
     *
     * @var PhoneNumbers $$phoneNumbers
     */
    public PhoneNumbers $phoneNumbers;

    /**
     * The Session object is an abstraction over an HTTP session.
     *
     * It models the period of information exchange between a user and the server.
     * Sessions are created when a user successfully goes through the sign in or sign up flows.
     *
     * @var Sessions $$sessions
     */
    public Sessions $sessions;

    /**
     * Email & SMS templates allow you to customize the theming and wording of emails & SMS messages that are sent by your instance.
     *
     * @var EmailAndSMSTemplates $$emailAndSMSTemplates
     */
    public EmailAndSMSTemplates $emailAndSMSTemplates;

    /**
     * The user object represents a user that has successfully signed up to your application.
     *
     * @var Users $$users
     */
    public Users $users;

    /**
     * Invitations allow you to invite someone to sign up to your application, via email.
     *
     * @var Invitations $$invitations
     */
    public Invitations $invitations;

    /**
     * Allow-lists and Block-lists allow you to control who can sign up or sign in
     *
     * to your application, by restricting access based on the user's email
     * address or phone number.
     *
     * @var AllowListBlockList $$allowListBlockList
     */
    public AllowListBlockList $allowListBlockList;

    /**
     * Modify instance settings that are currently in beta.
     *
     * @var BetaFeatures $$betaFeatures
     */
    public BetaFeatures $betaFeatures;

    /**
     * Allow your users to sign in on behalf of other users.
     *
     * @var ActorTokens $$actorTokens
     */
    public ActorTokens $actorTokens;

    /**
     * Domains represent each instance's URLs and DNS setup.
     *
     * @var Domains $$domains
     */
    public Domains $domains;

    /**
     * Modify the settings of your instance.
     *
     * @var InstanceSettings $$instanceSettings
     */
    public InstanceSettings $instanceSettings;

    /**
     * You can configure webhooks to be notified about various events that happen on your instance.
     *
     * @var Webhooks $$webhooks
     */
    public Webhooks $webhooks;

    /**
     * JWT Templates allow you to generate custom authentication tokens
     *
     * tied to authenticated sessions, enabling you to integrate with third-party
     * services.
     *
     * @var JWTTemplates $$jwtTemplates
     */
    public JWTTemplates $jwtTemplates;

    /**
     * Organizations are used to group members under a common entity and provide shared access to resources.
     *
     * @var Organizations $$organizations
     */
    public Organizations $organizations;

    /**
     * Invite users to an organization.
     *
     * @var OrganizationInvitations $$organizationInvitations
     */
    public OrganizationInvitations $organizationInvitations;

    /**
     * Manage member roles in an organization.
     *
     * @var OrganizationMemberships $$organizationMemberships
     */
    public OrganizationMemberships $organizationMemberships;

    public ProxyChecks $proxyChecks;

    /**
     * Redirect URLs are whitelisted URLs that facilitate secure authentication flows in native applications (e.g. React Native, Expo).
     *
     * In these contexts, Clerk ensures that security-critical nonces are passed only to the whitelisted URLs.
     *
     * @var RedirectURLs $$redirectURLs
     */
    public RedirectURLs $redirectURLs;

    /**
     * Sign-in tokens are JWTs that can be used to sign in to an application without specifying any credentials.
     *
     * A sign-in token can be used at most once and they can be consumed from the Frontend API using the `ticket` strategy.
     *
     * @var SignInTokens $$signInTokens
     */
    public SignInTokens $signInTokens;

    public SignUps $signUps;

    /**
     * OAuth applications contain data for clients using Clerk as an OAuth2 identity provider.
     *
     * @var OAuthApplications $$oAuthApplications
     */
    public OAuthApplications $oAuthApplications;

    /**
     * A SAML Connection holds configuration data required for facilitating a SAML SSO flow between your
     *
     * Clerk Instance (SP) and a particular SAML IdP.
     *
     * @var SAMLConnections $$samlConnections
     */
    public SAMLConnections $samlConnections;

    /**
     * Tokens meant for use by end-to-end test suites in requests to the Frontend API, so as to bypass bot detection measures.
     *
     * @var TestingTokens $$testingTokens
     */
    public TestingTokens $testingTokens;

    /**
     * Returns a new instance of the SDK builder used to configure and create the SDK instance.
     *
     * @return ClerkBackendBuilder
     */
    public static function builder(): ClerkBackendBuilder
    {
        return new ClerkBackendBuilder();
    }

    /**
     * @param  SDKConfiguration  $sdkConfiguration
     */
    public function __construct(
        public SDKConfiguration $sdkConfiguration,
    ) {
        $this->miscellaneous = new Miscellaneous($this->sdkConfiguration);
        $this->jwks = new Jwks($this->sdkConfiguration);
        $this->clients = new Clients($this->sdkConfiguration);
        $this->emailAddresses = new EmailAddresses($this->sdkConfiguration);
        $this->phoneNumbers = new PhoneNumbers($this->sdkConfiguration);
        $this->sessions = new Sessions($this->sdkConfiguration);
        $this->emailAndSMSTemplates = new EmailAndSMSTemplates($this->sdkConfiguration);
        $this->users = new Users($this->sdkConfiguration);
        $this->invitations = new Invitations($this->sdkConfiguration);
        $this->allowListBlockList = new AllowListBlockList($this->sdkConfiguration);
        $this->betaFeatures = new BetaFeatures($this->sdkConfiguration);
        $this->actorTokens = new ActorTokens($this->sdkConfiguration);
        $this->domains = new Domains($this->sdkConfiguration);
        $this->instanceSettings = new InstanceSettings($this->sdkConfiguration);
        $this->webhooks = new Webhooks($this->sdkConfiguration);
        $this->jwtTemplates = new JWTTemplates($this->sdkConfiguration);
        $this->organizations = new Organizations($this->sdkConfiguration);
        $this->organizationInvitations = new OrganizationInvitations($this->sdkConfiguration);
        $this->organizationMemberships = new OrganizationMemberships($this->sdkConfiguration);
        $this->proxyChecks = new ProxyChecks($this->sdkConfiguration);
        $this->redirectURLs = new RedirectURLs($this->sdkConfiguration);
        $this->signInTokens = new SignInTokens($this->sdkConfiguration);
        $this->signUps = new SignUps($this->sdkConfiguration);
        $this->oAuthApplications = new OAuthApplications($this->sdkConfiguration);
        $this->samlConnections = new SAMLConnections($this->sdkConfiguration);
        $this->testingTokens = new TestingTokens($this->sdkConfiguration);
    }
}