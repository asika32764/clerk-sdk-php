<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Clerk\Backend;

class OrganizationMemberships
{
    private SDKConfiguration $sdkConfiguration;

    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * Create a new organization membership
     *
     * Adds a user as a member to the given organization.
     * Only users in the same instance as the organization can be added as members.
     *
     * @param  string  $organizationId
     * @param  \Clerk\Backend\Models\Operations\CreateOrganizationMembershipRequestBody  $requestBody
     * @return \Clerk\Backend\Models\Operations\CreateOrganizationMembershipResponse
     */
    public function createOrganizationMembership(
        string $organizationId,
        \Clerk\Backend\Models\Operations\CreateOrganizationMembershipRequestBody $requestBody,
    ): \Clerk\Backend\Models\Operations\CreateOrganizationMembershipResponse {
        $request = new \Clerk\Backend\Models\Operations\CreateOrganizationMembershipRequest();
        $request->organizationId = $organizationId;
        $request->requestBody = $requestBody;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/memberships', \Clerk\Backend\Models\Operations\CreateOrganizationMembershipRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\CreateOrganizationMembershipResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationMembership = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\OrganizationMembership', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Get a list of all members of an organization
     *
     * Retrieves all user memberships for the given organization
     *
     * @param  string  $organizationId
     * @param  ?float  $limit
     * @param  ?float  $offset
     * @param  ?string  $orderBy
     * @return \Clerk\Backend\Models\Operations\ListOrganizationMembershipsResponse
     */
    public function listOrganizationMemberships(
        string $organizationId,
        ?float $limit = null,
        ?float $offset = null,
        ?string $orderBy = null,
    ): \Clerk\Backend\Models\Operations\ListOrganizationMembershipsResponse {
        $request = new \Clerk\Backend\Models\Operations\ListOrganizationMembershipsRequest();
        $request->organizationId = $organizationId;
        $request->limit = $limit;
        $request->offset = $offset;
        $request->orderBy = $orderBy;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/memberships', \Clerk\Backend\Models\Operations\ListOrganizationMembershipsRequest::class, $request);
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Clerk\Backend\Models\Operations\ListOrganizationMembershipsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\ListOrganizationMembershipsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationMemberships = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\OrganizationMemberships', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Update an organization membership
     *
     * Updates the properties of an existing organization membership
     *
     * @param  string  $organizationId
     * @param  string  $userId
     * @param  \Clerk\Backend\Models\Operations\UpdateOrganizationMembershipRequestBody  $requestBody
     * @return \Clerk\Backend\Models\Operations\UpdateOrganizationMembershipResponse
     */
    public function updateOrganizationMembership(
        string $organizationId,
        string $userId,
        \Clerk\Backend\Models\Operations\UpdateOrganizationMembershipRequestBody $requestBody,
    ): \Clerk\Backend\Models\Operations\UpdateOrganizationMembershipResponse {
        $request = new \Clerk\Backend\Models\Operations\UpdateOrganizationMembershipRequest();
        $request->organizationId = $organizationId;
        $request->userId = $userId;
        $request->requestBody = $requestBody;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/memberships/{user_id}', \Clerk\Backend\Models\Operations\UpdateOrganizationMembershipRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PATCH', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\UpdateOrganizationMembershipResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationMembership = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\OrganizationMembership', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Remove a member from an organization
     *
     * Removes the given membership from the organization
     *
     * @param  string  $organizationId
     * @param  string  $userId
     * @return \Clerk\Backend\Models\Operations\DeleteOrganizationMembershipResponse
     */
    public function deleteOrganizationMembership(
        string $organizationId,
        string $userId,
    ): \Clerk\Backend\Models\Operations\DeleteOrganizationMembershipResponse {
        $request = new \Clerk\Backend\Models\Operations\DeleteOrganizationMembershipRequest();
        $request->organizationId = $organizationId;
        $request->userId = $userId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/memberships/{user_id}', \Clerk\Backend\Models\Operations\DeleteOrganizationMembershipRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\DeleteOrganizationMembershipResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationMembership = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\OrganizationMembership', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Merge and update organization membership metadata
     *
     * Update an organization membership's metadata attributes by merging existing values with the provided parameters.
     * Metadata values will be updated via a deep merge. Deep means that any nested JSON objects will be merged as well.
     * You can remove metadata keys at any level by setting their value to `null`.
     *
     * @param  string  $organizationId
     * @param  string  $userId
     * @param  \Clerk\Backend\Models\Operations\UpdateOrganizationMembershipMetadataRequestBody  $requestBody
     * @return \Clerk\Backend\Models\Operations\UpdateOrganizationMembershipMetadataResponse
     */
    public function updateOrganizationMembershipMetadata(
        string $organizationId,
        string $userId,
        \Clerk\Backend\Models\Operations\UpdateOrganizationMembershipMetadataRequestBody $requestBody,
    ): \Clerk\Backend\Models\Operations\UpdateOrganizationMembershipMetadataResponse {
        $request = new \Clerk\Backend\Models\Operations\UpdateOrganizationMembershipMetadataRequest();
        $request->organizationId = $organizationId;
        $request->userId = $userId;
        $request->requestBody = $requestBody;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organization_id}/memberships/{user_id}/metadata', \Clerk\Backend\Models\Operations\UpdateOrganizationMembershipMetadataRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('PATCH', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\UpdateOrganizationMembershipMetadataResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizationMembership = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\OrganizationMembership', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }
}