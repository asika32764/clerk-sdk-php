<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Clerk\Backend;

class Invitations
{
    private SDKConfiguration $sdkConfiguration;

    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * Create an invitation
     *
     * Creates a new invitation for the given email address and sends the invitation email.
     * Keep in mind that you cannot create an invitation if there is already one for the given email address.
     * Also, trying to create an invitation for an email address that already exists in your application will result to an error.
     *
     * @param  \Clerk\Backend\Models\Operations\CreateInvitationRequestBody  $request
     * @return \Clerk\Backend\Models\Operations\CreateInvitationResponse
     */
    public function createInvitation(
        ?\Clerk\Backend\Models\Operations\CreateInvitationRequestBody $request,
    ): \Clerk\Backend\Models\Operations\CreateInvitationResponse {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/invitations');
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'request', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\CreateInvitationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->invitation = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\Invitation', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * List all invitations
     *
     * Returns all non-revoked invitations for your application, sorted by creation date
     *
     * @param  ?float  $limit
     * @param  ?float  $offset
     * @param  ?\Clerk\Backend\Models\Operations\QueryParamStatus  $status
     * @return \Clerk\Backend\Models\Operations\ListInvitationsResponse
     */
    public function listInvitations(
        ?float $limit = null,
        ?float $offset = null,
        ?\Clerk\Backend\Models\Operations\QueryParamStatus $status = null,
    ): \Clerk\Backend\Models\Operations\ListInvitationsResponse {
        $request = new \Clerk\Backend\Models\Operations\ListInvitationsRequest();
        $request->limit = $limit;
        $request->offset = $offset;
        $request->status = $status;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/invitations');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Clerk\Backend\Models\Operations\ListInvitationsRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\ListInvitationsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->invitationList = $serializer->deserialize((string) $httpResponse->getBody(), 'array<Clerk\Backend\Models\Components\Invitation>', 'json');
            }
        }

        return $response;
    }

    /**
     * Revokes an invitation
     *
     * Revokes the given invitation.
     * Revoking an invitation will prevent the user from using the invitation link that was sent to them.
     * However, it doesn't prevent the user from signing up if they follow the sign up flow.
     * Only active (i.e. non-revoked) invitations can be revoked.
     *
     * @param  string  $invitationId
     * @return \Clerk\Backend\Models\Operations\RevokeInvitationResponse
     */
    public function revokeInvitation(
        string $invitationId,
    ): \Clerk\Backend\Models\Operations\RevokeInvitationResponse {
        $request = new \Clerk\Backend\Models\Operations\RevokeInvitationRequest();
        $request->invitationId = $invitationId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/invitations/{invitation_id}/revoke', \Clerk\Backend\Models\Operations\RevokeInvitationRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\RevokeInvitationResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->invitationRevoked = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\InvitationRevoked', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }
}