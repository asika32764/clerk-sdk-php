<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Clerk\Backend;

class Sessions
{
    private SDKConfiguration $sdkConfiguration;

    /**
     * @param  SDKConfiguration  $sdkConfig
     */
    public function __construct(SDKConfiguration $sdkConfig)
    {
        $this->sdkConfiguration = $sdkConfig;
    }

    /**
     * List all sessions
     *
     * Returns a list of all sessions.
     * The sessions are returned sorted by creation date, with the newest sessions appearing first.
     * **Deprecation Notice (2024-01-01):** All parameters were initially considered optional, however
     * moving forward at least one of `client_id` or `user_id` parameters should be provided.
     *
     * @param  \Clerk\Backend\Models\Operations\GetSessionListRequest  $request
     * @return \Clerk\Backend\Models\Operations\GetSessionListResponse
     */
    public function getSessionList(
        ?\Clerk\Backend\Models\Operations\GetSessionListRequest $request,
    ): \Clerk\Backend\Models\Operations\GetSessionListResponse {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/sessions');
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\Clerk\Backend\Models\Operations\GetSessionListRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\GetSessionListResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sessionList = $serializer->deserialize((string) $httpResponse->getBody(), 'array<Clerk\Backend\Models\Components\Session>', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Retrieve a session
     *
     * Retrieve the details of a session
     *
     * @param  string  $sessionId
     * @return \Clerk\Backend\Models\Operations\GetSessionResponse
     */
    public function getSession(
        string $sessionId,
    ): \Clerk\Backend\Models\Operations\GetSessionResponse {
        $request = new \Clerk\Backend\Models\Operations\GetSessionRequest();
        $request->sessionId = $sessionId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/sessions/{session_id}', \Clerk\Backend\Models\Operations\GetSessionRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\GetSessionResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->session = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\Session', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Revoke a session
     *
     * Sets the status of a session as "revoked", which is an unauthenticated state.
     * In multi-session mode, a revoked session will still be returned along with its client object, however the user will need to sign in again.
     *
     * @param  string  $sessionId
     * @return \Clerk\Backend\Models\Operations\RevokeSessionResponse
     */
    public function revokeSession(
        string $sessionId,
    ): \Clerk\Backend\Models\Operations\RevokeSessionResponse {
        $request = new \Clerk\Backend\Models\Operations\RevokeSessionRequest();
        $request->sessionId = $sessionId;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/sessions/{session_id}/revoke', \Clerk\Backend\Models\Operations\RevokeSessionRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\RevokeSessionResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->session = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\Session', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Verify a session
     *
     * Returns the session if it is authenticated, otherwise returns an error.
     * WARNING: This endpoint is deprecated and will be removed in future versions. We strongly recommend switching to networkless verification using short-lived session tokens,
     *          which is implemented transparently in all recent SDK versions (e.g. [NodeJS SDK](https://clerk.com/docs/backend-requests/handling/nodejs#clerk-express-require-auth)).
     *          For more details on how networkless verification works, refer to our [Session Tokens documentation](https://clerk.com/docs/backend-requests/resources/session-tokens).
     *
     * @param  string  $sessionId
     * @param  ?\Clerk\Backend\Models\Operations\VerifySessionRequestBody  $requestBody
     * @return \Clerk\Backend\Models\Operations\VerifySessionResponse
     * @deprecated  method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    public function verifySession(
        string $sessionId,
        ?\Clerk\Backend\Models\Operations\VerifySessionRequestBody $requestBody = null,
    ): \Clerk\Backend\Models\Operations\VerifySessionResponse {
        trigger_error('Method '.__METHOD__.' is deprecated', E_USER_DEPRECATED);
        $request = new \Clerk\Backend\Models\Operations\VerifySessionRequest();
        $request->sessionId = $sessionId;
        $request->requestBody = $requestBody;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/sessions/{session_id}/verify', \Clerk\Backend\Models\Operations\VerifySessionRequest::class, $request);
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, 'requestBody', 'json');
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\VerifySessionResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->session = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\Session', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 410) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }

    /**
     * Create a session token from a jwt template
     *
     * Creates a JSON Web Token(JWT) based on a session and a JWT Template name defined for your instance
     *
     * @param  string  $sessionId
     * @param  string  $templateName
     * @return \Clerk\Backend\Models\Operations\CreateSessionTokenFromTemplateResponse
     */
    public function createSessionTokenFromTemplate(
        string $sessionId,
        string $templateName,
    ): \Clerk\Backend\Models\Operations\CreateSessionTokenFromTemplateResponse {
        $request = new \Clerk\Backend\Models\Operations\CreateSessionTokenFromTemplateRequest();
        $request->sessionId = $sessionId;
        $request->templateName = $templateName;
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/sessions/{session_id}/tokens/{template_name}', \Clerk\Backend\Models\Operations\CreateSessionTokenFromTemplateRequest::class, $request);
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;

        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \Clerk\Backend\Models\Operations\CreateSessionTokenFromTemplateResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Operations\CreateSessionTokenFromTemplateResponseBody', 'json');
            }
        } elseif ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clerkErrors = $serializer->deserialize((string) $httpResponse->getBody(), 'Clerk\Backend\Models\Components\ClerkErrors', 'json');
            }
        }

        return $response;
    }
}